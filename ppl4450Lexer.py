# Generated from ppl4450.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,37,236,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,1,1,1,1,2,1,
        2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,
        7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,
        1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,
        1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,
        1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,
        1,27,1,28,1,28,5,28,154,8,28,10,28,12,28,157,9,28,1,29,1,29,5,29,
        161,8,29,10,29,12,29,164,9,29,1,29,1,29,1,29,5,29,169,8,29,10,29,
        12,29,172,9,29,1,29,3,29,175,8,29,1,30,3,30,178,8,30,1,30,4,30,181,
        8,30,11,30,12,30,182,1,31,3,31,186,8,31,1,31,4,31,189,8,31,11,31,
        12,31,190,1,31,1,31,4,31,195,8,31,11,31,12,31,196,1,31,3,31,200,
        8,31,1,31,1,31,4,31,204,8,31,11,31,12,31,205,3,31,208,8,31,1,32,
        1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,219,8,32,1,33,1,33,
        1,34,1,34,1,35,4,35,226,8,35,11,35,12,35,227,1,36,4,36,231,8,36,
        11,36,12,36,232,1,36,1,36,0,0,37,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
        30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,1,0,8,3,0,65,90,95,
        95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,39,39,1,0,34,34,2,0,43,
        43,45,45,1,0,48,57,2,0,10,10,13,13,2,0,9,9,32,32,250,0,1,1,0,0,0,
        0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
        1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
        1,0,0,0,1,75,1,0,0,0,3,77,1,0,0,0,5,79,1,0,0,0,7,81,1,0,0,0,9,83,
        1,0,0,0,11,85,1,0,0,0,13,88,1,0,0,0,15,93,1,0,0,0,17,98,1,0,0,0,
        19,100,1,0,0,0,21,103,1,0,0,0,23,106,1,0,0,0,25,109,1,0,0,0,27,112,
        1,0,0,0,29,114,1,0,0,0,31,116,1,0,0,0,33,119,1,0,0,0,35,122,1,0,
        0,0,37,125,1,0,0,0,39,128,1,0,0,0,41,132,1,0,0,0,43,135,1,0,0,0,
        45,139,1,0,0,0,47,141,1,0,0,0,49,143,1,0,0,0,51,145,1,0,0,0,53,147,
        1,0,0,0,55,149,1,0,0,0,57,151,1,0,0,0,59,174,1,0,0,0,61,177,1,0,
        0,0,63,207,1,0,0,0,65,218,1,0,0,0,67,220,1,0,0,0,69,222,1,0,0,0,
        71,225,1,0,0,0,73,230,1,0,0,0,75,76,5,43,0,0,76,2,1,0,0,0,77,78,
        5,45,0,0,78,4,1,0,0,0,79,80,5,42,0,0,80,6,1,0,0,0,81,82,5,47,0,0,
        82,8,1,0,0,0,83,84,5,37,0,0,84,10,1,0,0,0,85,86,5,105,0,0,86,87,
        5,102,0,0,87,12,1,0,0,0,88,89,5,101,0,0,89,90,5,108,0,0,90,91,5,
        105,0,0,91,92,5,102,0,0,92,14,1,0,0,0,93,94,5,101,0,0,94,95,5,108,
        0,0,95,96,5,115,0,0,96,97,5,101,0,0,97,16,1,0,0,0,98,99,5,61,0,0,
        99,18,1,0,0,0,100,101,5,43,0,0,101,102,5,61,0,0,102,20,1,0,0,0,103,
        104,5,45,0,0,104,105,5,61,0,0,105,22,1,0,0,0,106,107,5,42,0,0,107,
        108,5,61,0,0,108,24,1,0,0,0,109,110,5,47,0,0,110,111,5,61,0,0,111,
        26,1,0,0,0,112,113,5,60,0,0,113,28,1,0,0,0,114,115,5,62,0,0,115,
        30,1,0,0,0,116,117,5,60,0,0,117,118,5,61,0,0,118,32,1,0,0,0,119,
        120,5,62,0,0,120,121,5,61,0,0,121,34,1,0,0,0,122,123,5,61,0,0,123,
        124,5,61,0,0,124,36,1,0,0,0,125,126,5,33,0,0,126,127,5,61,0,0,127,
        38,1,0,0,0,128,129,5,97,0,0,129,130,5,110,0,0,130,131,5,100,0,0,
        131,40,1,0,0,0,132,133,5,111,0,0,133,134,5,114,0,0,134,42,1,0,0,
        0,135,136,5,110,0,0,136,137,5,111,0,0,137,138,5,116,0,0,138,44,1,
        0,0,0,139,140,5,91,0,0,140,46,1,0,0,0,141,142,5,93,0,0,142,48,1,
        0,0,0,143,144,5,40,0,0,144,50,1,0,0,0,145,146,5,41,0,0,146,52,1,
        0,0,0,147,148,5,44,0,0,148,54,1,0,0,0,149,150,5,58,0,0,150,56,1,
        0,0,0,151,155,7,0,0,0,152,154,7,1,0,0,153,152,1,0,0,0,154,157,1,
        0,0,0,155,153,1,0,0,0,155,156,1,0,0,0,156,58,1,0,0,0,157,155,1,0,
        0,0,158,162,5,39,0,0,159,161,8,2,0,0,160,159,1,0,0,0,161,164,1,0,
        0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,165,1,0,0,0,164,162,1,0,
        0,0,165,175,5,39,0,0,166,170,5,34,0,0,167,169,8,3,0,0,168,167,1,
        0,0,0,169,172,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,173,1,
        0,0,0,172,170,1,0,0,0,173,175,5,34,0,0,174,158,1,0,0,0,174,166,1,
        0,0,0,175,60,1,0,0,0,176,178,7,4,0,0,177,176,1,0,0,0,177,178,1,0,
        0,0,178,180,1,0,0,0,179,181,7,5,0,0,180,179,1,0,0,0,181,182,1,0,
        0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,62,1,0,0,0,184,186,7,4,0,
        0,185,184,1,0,0,0,185,186,1,0,0,0,186,188,1,0,0,0,187,189,7,5,0,
        0,188,187,1,0,0,0,189,190,1,0,0,0,190,188,1,0,0,0,190,191,1,0,0,
        0,191,192,1,0,0,0,192,194,5,46,0,0,193,195,7,5,0,0,194,193,1,0,0,
        0,195,196,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,208,1,0,0,
        0,198,200,7,4,0,0,199,198,1,0,0,0,199,200,1,0,0,0,200,201,1,0,0,
        0,201,203,5,46,0,0,202,204,7,5,0,0,203,202,1,0,0,0,204,205,1,0,0,
        0,205,203,1,0,0,0,205,206,1,0,0,0,206,208,1,0,0,0,207,185,1,0,0,
        0,207,199,1,0,0,0,208,64,1,0,0,0,209,210,5,84,0,0,210,211,5,114,
        0,0,211,212,5,117,0,0,212,219,5,101,0,0,213,214,5,70,0,0,214,215,
        5,97,0,0,215,216,5,108,0,0,216,217,5,115,0,0,217,219,5,101,0,0,218,
        209,1,0,0,0,218,213,1,0,0,0,219,66,1,0,0,0,220,221,5,9,0,0,221,68,
        1,0,0,0,222,223,5,8,0,0,223,70,1,0,0,0,224,226,7,6,0,0,225,224,1,
        0,0,0,226,227,1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,72,1,0,
        0,0,229,231,7,7,0,0,230,229,1,0,0,0,231,232,1,0,0,0,232,230,1,0,
        0,0,232,233,1,0,0,0,233,234,1,0,0,0,234,235,6,36,0,0,235,74,1,0,
        0,0,16,0,155,162,170,174,177,182,185,190,196,199,205,207,218,227,
        232,1,6,0,0
    ]

class ppl4450Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PLU = 1
    MIN = 2
    MUL = 3
    DIV = 4
    MOD = 5
    IF = 6
    ELIF = 7
    ELSE = 8
    EQU = 9
    EQU_P = 10
    EQU_MI = 11
    EQU_MU = 12
    EQU_D = 13
    CLT = 14
    CGT = 15
    CLTE = 16
    CGTE = 17
    CEQU = 18
    CNEQU = 19
    AND = 20
    OR = 21
    NOT = 22
    BRA_O = 23
    BRA_C = 24
    PAR_O = 25
    PAR_C = 26
    COM = 27
    COL = 28
    ID = 29
    STR = 30
    INT = 31
    FLO = 32
    BOOL = 33
    INDT = 34
    OUTDT = 35
    NL = 36
    WS = 37

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'*'", "'/'", "'%'", "'if'", "'elif'", "'else'", 
            "'='", "'+='", "'-='", "'*='", "'/='", "'<'", "'>'", "'<='", 
            "'>='", "'=='", "'!='", "'and'", "'or'", "'not'", "'['", "']'", 
            "'('", "')'", "','", "':'", "'\\t'", "'\\b'" ]

    symbolicNames = [ "<INVALID>",
            "PLU", "MIN", "MUL", "DIV", "MOD", "IF", "ELIF", "ELSE", "EQU", 
            "EQU_P", "EQU_MI", "EQU_MU", "EQU_D", "CLT", "CGT", "CLTE", 
            "CGTE", "CEQU", "CNEQU", "AND", "OR", "NOT", "BRA_O", "BRA_C", 
            "PAR_O", "PAR_C", "COM", "COL", "ID", "STR", "INT", "FLO", "BOOL", 
            "INDT", "OUTDT", "NL", "WS" ]

    ruleNames = [ "PLU", "MIN", "MUL", "DIV", "MOD", "IF", "ELIF", "ELSE", 
                  "EQU", "EQU_P", "EQU_MI", "EQU_MU", "EQU_D", "CLT", "CGT", 
                  "CLTE", "CGTE", "CEQU", "CNEQU", "AND", "OR", "NOT", "BRA_O", 
                  "BRA_C", "PAR_O", "PAR_C", "COM", "COL", "ID", "STR", 
                  "INT", "FLO", "BOOL", "INDT", "OUTDT", "NL", "WS" ]

    grammarFileName = "ppl4450.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


