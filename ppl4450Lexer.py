# Generated from ppl4450.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from antlr_denter.DenterHelper import DenterHelper
from ppl4450Parser import ppl4450Parser


def serializedATN():
    return [
        4,0,43,297,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,1,0,1,0,1,1,1,1,1,2,1,2,1,
        3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
        7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,
        11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,
        16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,
        21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,
        24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,
        29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,5,32,185,8,32,10,32,12,32,
        188,9,32,1,33,1,33,5,33,192,8,33,10,33,12,33,195,9,33,1,33,1,33,
        1,33,5,33,200,8,33,10,33,12,33,203,9,33,1,33,3,33,206,8,33,1,34,
        3,34,209,8,34,1,34,4,34,212,8,34,11,34,12,34,213,1,35,3,35,217,8,
        35,1,35,4,35,220,8,35,11,35,12,35,221,1,35,1,35,4,35,226,8,35,11,
        35,12,35,227,1,35,3,35,231,8,35,1,35,1,35,4,35,235,8,35,11,35,12,
        35,236,3,35,239,8,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
        3,36,250,8,36,1,37,1,37,1,38,1,38,1,39,3,39,257,8,39,1,39,1,39,5,
        39,261,8,39,10,39,12,39,264,9,39,1,40,4,40,267,8,40,11,40,12,40,
        268,1,40,1,40,1,41,1,41,5,41,275,8,41,10,41,12,41,278,9,41,1,41,
        1,41,1,42,1,42,1,42,1,42,1,42,5,42,287,8,42,10,42,12,42,290,9,42,
        1,42,1,42,1,42,1,42,1,42,1,42,1,288,0,43,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
        79,40,81,41,83,42,85,43,1,0,8,3,0,65,90,95,95,97,122,4,0,48,57,65,
        90,95,95,97,122,1,0,39,39,1,0,34,34,2,0,43,43,45,45,1,0,48,57,2,
        0,9,9,32,32,2,0,10,10,13,13,314,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
        0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
        0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
        0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
        0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,
        0,1,87,1,0,0,0,3,89,1,0,0,0,5,91,1,0,0,0,7,93,1,0,0,0,9,95,1,0,0,
        0,11,97,1,0,0,0,13,100,1,0,0,0,15,105,1,0,0,0,17,110,1,0,0,0,19,
        116,1,0,0,0,21,120,1,0,0,0,23,123,1,0,0,0,25,125,1,0,0,0,27,128,
        1,0,0,0,29,131,1,0,0,0,31,134,1,0,0,0,33,137,1,0,0,0,35,139,1,0,
        0,0,37,141,1,0,0,0,39,144,1,0,0,0,41,147,1,0,0,0,43,150,1,0,0,0,
        45,153,1,0,0,0,47,157,1,0,0,0,49,160,1,0,0,0,51,164,1,0,0,0,53,170,
        1,0,0,0,55,172,1,0,0,0,57,174,1,0,0,0,59,176,1,0,0,0,61,178,1,0,
        0,0,63,180,1,0,0,0,65,182,1,0,0,0,67,205,1,0,0,0,69,208,1,0,0,0,
        71,238,1,0,0,0,73,249,1,0,0,0,75,251,1,0,0,0,77,253,1,0,0,0,79,256,
        1,0,0,0,81,266,1,0,0,0,83,272,1,0,0,0,85,281,1,0,0,0,87,88,5,43,
        0,0,88,2,1,0,0,0,89,90,5,45,0,0,90,4,1,0,0,0,91,92,5,42,0,0,92,6,
        1,0,0,0,93,94,5,47,0,0,94,8,1,0,0,0,95,96,5,37,0,0,96,10,1,0,0,0,
        97,98,5,105,0,0,98,99,5,102,0,0,99,12,1,0,0,0,100,101,5,101,0,0,
        101,102,5,108,0,0,102,103,5,105,0,0,103,104,5,102,0,0,104,14,1,0,
        0,0,105,106,5,101,0,0,106,107,5,108,0,0,107,108,5,115,0,0,108,109,
        5,101,0,0,109,16,1,0,0,0,110,111,5,119,0,0,111,112,5,104,0,0,112,
        113,5,105,0,0,113,114,5,108,0,0,114,115,5,101,0,0,115,18,1,0,0,0,
        116,117,5,102,0,0,117,118,5,111,0,0,118,119,5,114,0,0,119,20,1,0,
        0,0,120,121,5,105,0,0,121,122,5,110,0,0,122,22,1,0,0,0,123,124,5,
        61,0,0,124,24,1,0,0,0,125,126,5,43,0,0,126,127,5,61,0,0,127,26,1,
        0,0,0,128,129,5,45,0,0,129,130,5,61,0,0,130,28,1,0,0,0,131,132,5,
        42,0,0,132,133,5,61,0,0,133,30,1,0,0,0,134,135,5,47,0,0,135,136,
        5,61,0,0,136,32,1,0,0,0,137,138,5,60,0,0,138,34,1,0,0,0,139,140,
        5,62,0,0,140,36,1,0,0,0,141,142,5,60,0,0,142,143,5,61,0,0,143,38,
        1,0,0,0,144,145,5,62,0,0,145,146,5,61,0,0,146,40,1,0,0,0,147,148,
        5,61,0,0,148,149,5,61,0,0,149,42,1,0,0,0,150,151,5,33,0,0,151,152,
        5,61,0,0,152,44,1,0,0,0,153,154,5,97,0,0,154,155,5,110,0,0,155,156,
        5,100,0,0,156,46,1,0,0,0,157,158,5,111,0,0,158,159,5,114,0,0,159,
        48,1,0,0,0,160,161,5,110,0,0,161,162,5,111,0,0,162,163,5,116,0,0,
        163,50,1,0,0,0,164,165,5,114,0,0,165,166,5,97,0,0,166,167,5,110,
        0,0,167,168,5,103,0,0,168,169,5,101,0,0,169,52,1,0,0,0,170,171,5,
        91,0,0,171,54,1,0,0,0,172,173,5,93,0,0,173,56,1,0,0,0,174,175,5,
        40,0,0,175,58,1,0,0,0,176,177,5,41,0,0,177,60,1,0,0,0,178,179,5,
        44,0,0,179,62,1,0,0,0,180,181,5,58,0,0,181,64,1,0,0,0,182,186,7,
        0,0,0,183,185,7,1,0,0,184,183,1,0,0,0,185,188,1,0,0,0,186,184,1,
        0,0,0,186,187,1,0,0,0,187,66,1,0,0,0,188,186,1,0,0,0,189,193,5,39,
        0,0,190,192,8,2,0,0,191,190,1,0,0,0,192,195,1,0,0,0,193,191,1,0,
        0,0,193,194,1,0,0,0,194,196,1,0,0,0,195,193,1,0,0,0,196,206,5,39,
        0,0,197,201,5,34,0,0,198,200,8,3,0,0,199,198,1,0,0,0,200,203,1,0,
        0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,204,1,0,0,0,203,201,1,0,
        0,0,204,206,5,34,0,0,205,189,1,0,0,0,205,197,1,0,0,0,206,68,1,0,
        0,0,207,209,7,4,0,0,208,207,1,0,0,0,208,209,1,0,0,0,209,211,1,0,
        0,0,210,212,7,5,0,0,211,210,1,0,0,0,212,213,1,0,0,0,213,211,1,0,
        0,0,213,214,1,0,0,0,214,70,1,0,0,0,215,217,7,4,0,0,216,215,1,0,0,
        0,216,217,1,0,0,0,217,219,1,0,0,0,218,220,7,5,0,0,219,218,1,0,0,
        0,220,221,1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,223,1,0,0,
        0,223,225,5,46,0,0,224,226,7,5,0,0,225,224,1,0,0,0,226,227,1,0,0,
        0,227,225,1,0,0,0,227,228,1,0,0,0,228,239,1,0,0,0,229,231,7,4,0,
        0,230,229,1,0,0,0,230,231,1,0,0,0,231,232,1,0,0,0,232,234,5,46,0,
        0,233,235,7,5,0,0,234,233,1,0,0,0,235,236,1,0,0,0,236,234,1,0,0,
        0,236,237,1,0,0,0,237,239,1,0,0,0,238,216,1,0,0,0,238,230,1,0,0,
        0,239,72,1,0,0,0,240,241,5,84,0,0,241,242,5,114,0,0,242,243,5,117,
        0,0,243,250,5,101,0,0,244,245,5,70,0,0,245,246,5,97,0,0,246,247,
        5,108,0,0,247,248,5,115,0,0,248,250,5,101,0,0,249,240,1,0,0,0,249,
        244,1,0,0,0,250,74,1,0,0,0,251,252,5,9,0,0,252,76,1,0,0,0,253,254,
        5,8,0,0,254,78,1,0,0,0,255,257,5,13,0,0,256,255,1,0,0,0,256,257,
        1,0,0,0,257,258,1,0,0,0,258,262,5,10,0,0,259,261,5,9,0,0,260,259,
        1,0,0,0,261,264,1,0,0,0,262,260,1,0,0,0,262,263,1,0,0,0,263,80,1,
        0,0,0,264,262,1,0,0,0,265,267,7,6,0,0,266,265,1,0,0,0,267,268,1,
        0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,270,1,0,0,0,270,271,6,
        40,0,0,271,82,1,0,0,0,272,276,5,35,0,0,273,275,8,7,0,0,274,273,1,
        0,0,0,275,278,1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,279,1,
        0,0,0,278,276,1,0,0,0,279,280,6,41,0,0,280,84,1,0,0,0,281,282,5,
        39,0,0,282,283,5,39,0,0,283,284,5,39,0,0,284,288,1,0,0,0,285,287,
        9,0,0,0,286,285,1,0,0,0,287,290,1,0,0,0,288,289,1,0,0,0,288,286,
        1,0,0,0,289,291,1,0,0,0,290,288,1,0,0,0,291,292,5,39,0,0,292,293,
        5,39,0,0,293,294,5,39,0,0,294,295,1,0,0,0,295,296,6,42,0,0,296,86,
        1,0,0,0,19,0,186,193,201,205,208,213,216,221,227,230,236,238,249,
        256,262,268,276,288,1,6,0,0
    ]

class ppl4450Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PLU = 1
    MIN = 2
    MUL = 3
    DIV = 4
    MOD = 5
    IF = 6
    ELIF = 7
    ELSE = 8
    WH = 9
    FOR = 10
    IN = 11
    EQU = 12
    EQU_P = 13
    EQU_MI = 14
    EQU_MU = 15
    EQU_D = 16
    CLT = 17
    CGT = 18
    CLTE = 19
    CGTE = 20
    CEQU = 21
    CNEQU = 22
    AND = 23
    OR = 24
    NOT = 25
    RAN = 26
    BRA_O = 27
    BRA_C = 28
    PAR_O = 29
    PAR_C = 30
    COM = 31
    COL = 32
    ID = 33
    STR = 34
    INT = 35
    FLO = 36
    BOOL = 37
    INDT = 38
    OUTDT = 39
    NL = 40
    WS = 41
    HCOM = 42
    ACOM = 43

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'*'", "'/'", "'%'", "'if'", "'elif'", "'else'", 
            "'while'", "'for'", "'in'", "'='", "'+='", "'-='", "'*='", "'/='", 
            "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'and'", "'or'", 
            "'not'", "'range'", "'['", "']'", "'('", "')'", "','", "':'", 
            "'\\t'", "'\\b'" ]

    symbolicNames = [ "<INVALID>",
            "PLU", "MIN", "MUL", "DIV", "MOD", "IF", "ELIF", "ELSE", "WH", 
            "FOR", "IN", "EQU", "EQU_P", "EQU_MI", "EQU_MU", "EQU_D", "CLT", 
            "CGT", "CLTE", "CGTE", "CEQU", "CNEQU", "AND", "OR", "NOT", 
            "RAN", "BRA_O", "BRA_C", "PAR_O", "PAR_C", "COM", "COL", "ID", 
            "STR", "INT", "FLO", "BOOL", "INDT", "OUTDT", "NL", "WS", "HCOM", 
            "ACOM" ]

    ruleNames = [ "PLU", "MIN", "MUL", "DIV", "MOD", "IF", "ELIF", "ELSE", 
                  "WH", "FOR", "IN", "EQU", "EQU_P", "EQU_MI", "EQU_MU", 
                  "EQU_D", "CLT", "CGT", "CLTE", "CGTE", "CEQU", "CNEQU", 
                  "AND", "OR", "NOT", "RAN", "BRA_O", "BRA_C", "PAR_O", 
                  "PAR_C", "COM", "COL", "ID", "STR", "INT", "FLO", "BOOL", 
                  "INDT", "OUTDT", "NL", "WS", "HCOM", "ACOM" ]

    grammarFileName = "ppl4450.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    class antlrDenter(DenterHelper):
    	def __init__(self, lexer, nl_token, indent_token, dedent_token, ignore_eof):
    		super().__init__(nl_token, indent_token, dedent_token, ignore_eof)
    		self.lexer: ppl4450Lexer = lexer
    		
    	def pull_token(self):
    		return super(ppl4450Lexer, self.lexer).nextToken()
    		
    denter = None

    def nextToken(self):
    	if not self.denter:
    		self.denter = self.antlrDenter(self, self.NL, ppl4450Parser.INDENT, ppl4450Parser.DEDENT, False)
    	return self.denter.next_token()


